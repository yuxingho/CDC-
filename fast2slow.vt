// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "02/05/2025 11:11:54"
                                                                                
// Verilog Test Bench template for design : fast2slow
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
`define CLK_FAST_PERIOD 35
`define CLK_SLOW_PERIOD 100
module fast2slow_vlg_tst();
// test vector input registers
reg i_clk_f;
reg i_clk_s;
reg i_pluse_f;
reg i_reset;
// wires                                               
wire o_pluse_s;

// assign statements (if any)                          
fast2slow i1 (
// port map - connection between master ports and signals/registers   
	.i_clk_f(i_clk_f),
	.i_clk_s(i_clk_s),
	.i_pluse_f(i_pluse_f),
	.i_reset(i_reset),
	.o_pluse_s(o_pluse_s)
);
initial begin                                                  
	i_clk_s = 0;
	i_clk_f = 0;
	i_reset <= 0;
	#20
	i_reset <= 1;
end      
                                              
always #(`CLK_SLOW_PERIOD/2) i_clk_s = ~i_clk_s;
always #(`CLK_FAST_PERIOD/2) i_clk_f = ~i_clk_f;                                               

initial begin
	i_pluse_f = 0;
	repeat(20) @(posedge i_clk_f);
	i_pluse_f = 1;
	@(posedge i_clk_f);
	i_pluse_f = 0;
	repeat(20) @(posedge i_clk_f);
	$stop;
end
                                            
endmodule

